#!/usr/bin/python
# -*- coding: utf-8 -*-

# Mostly inspired by
# http://mail.python.org/pipermail/python-list/2001-February/071414.html
# and
# http://code.activestate.com/recipes/278731/


import os
import sys
import optparse
import resource

import time
import signal
import pprint
import inspect
import subprocess
import ConfigParser

import sjutils

VERSION = "@PACKAGE_VERSION@"

# Default maximum for the number of available file descriptors.
MAXFD = 1024

DFLT_PIDFILE = "/var/run/sl2d/sl2d.pid"
DFLT_LOGPATH = "/var/log/sl2d/"
DFLT_CONFFILE = "/etc/sl2d.conf"

DFLT_MAIN_LOOP_DELAY = 15
DFLT_RESPAWN_MIN_DELAY = 5

OPTIONS = {
    # Unclassified settings
    'format':       'f',
    'flags':        'flags',
    'flags2':       'flags2',
    'partitions':   'partitions',
    'coder':        'coder',
    'refs':         'refs',
    'threads':      'threads',

    # Audio settings known by ffserver
    'audio_codec':       'acodec',
    'audio_volume':      'vol',
    'audio_bit_rate':    'ab',
    'audio_channels':    'ac',
    'audio_sample_rate': 'ar',

    # Video settings known by ffserver
    'video_codec':      'vcodec',
    'video_bit_rate':   'b',
    'video_size':       's',
    'video_gop_size':   'g',
    'video_q_min':      'qmin',
    'video_q_max':      'qmax',
    'video_frame_rate': 'r',

    # Other video settings
    'video_macroblock_decision': 'mbd',
    'video_macroblock_l_max':    'mblmax',
    'video_l_max':               'lmax',
    'video_q_comp':              'qcomp',
    'video_q_diff':              'qdiff',
    'video_b_frames':            'bf',
    'video_b_strategy':          'b_strategy',
    'video_i_q_factor':          'i_qfactor',
    'video_sc_threshold':        'sc_threshold',
    'video_direct_pred':         'directpred',
    'video_me_method':           'me_method',
    'video_me_range':            'me_range',
    'video_cmp':                 'cmp',
    'video_sub_cmp':             'subcmp',
    'video_sub_q':               'subq',
    'video_keyint_min':          'keyint_min',
    'video_sync_method':         'vsync',
    'video_trellis':             'trellis',
    'video_crop_left':           'cropleft',
    'video_crop_right':          'cropright',
    'video_crop_top':            'croptop',
    'video_crop_bottom':         'cropbottom',
    'video_pad_left':            'padleft',
    'video_pad_right':           'padright',
    'video_pad_top':             'padtop',
    'video_pad_bottom':          'padbottom',
    'video_pad_color':           'padcolor',
    'video_aspect':              'aspect',

    'audio_sync_method':         'async',
}

OPTIONS_SINGLE = {
    'video_copy_timestamps': 'copyts',
    'video_deinterlace':     'deinterlace',
}

class MonitorLogger:

    def __init__(self, section, logpath=None, debug_level=0):
        """ Init method. """

        self.logfile = ""
        self.section = section

        if logpath and os.path.exists(logpath) and os.path.isdir(logpath):
            self.logfile = os.path.sep.join((logpath, section + '.log'))
            self.log = sjutils.Logger2(self.logfile)
            self.log.redirect_stdout_stderr()
            self.closable = True
        else:
            # This is not portable but who cares ?
            self.log = sjutils.Logger2('/dev/stdout')
            self.closable = False

        self.level = debug_level

    def close(self):
        """ Close whatever needs to be closed. """

        if self.closable:
            self.log.close()

    def get_log_file(self):
        """ Returns filename as appropriate. """

        return self.closable and open(self.logfile, 'a') or open('/dev/stdout', 'a')

    def write(self, level, message):
        """ Write a message to the log file. """

        if level <= self.level:
            self.log.write('[%s] %s' % (self.section, message))

class Monitor:

    def __init__(self, monitor_options):
        """ Init method. """

        self.schedule = {}
        self.process_list = {}
        self.commands = []
        self.respawn_quick = False

        self.params = {
            'main_loop_delay': DFLT_MAIN_LOOP_DELAY,
            'respawn_min_delay': DFLT_RESPAWN_MIN_DELAY,
            'verbosity': monitor_options.verbosity,
            'logpath': monitor_options.logpath,
            'config': monitor_options.conffile,
        }

        self.pidfile = monitor_options.pidfile
        self.daemon = not monitor_options.nodaemon
        if self.daemon:
            self.log = MonitorLogger('sl2d', \
                logpath=self.params['logpath'], \
                debug_level=self.params['verbosity'])
        else:
            self.log = MonitorLogger('sl2d', debug_level=self.params['verbosity'])

        self.log.write(0, "*** sl2d version %s, init ***" % VERSION)
        self.parse_config()

        signal.signal(signal.SIGTERM, self.shutdown)
        signal.signal(signal.SIGINT,  self.shutdown)
        signal.signal(signal.SIGCHLD, self.child_shutdown)
        signal.signal(signal.SIGUSR2, self.reload_config)

    def parse_config_section(self, section, options, logger):
        """ Parse a single configuration section.

        Returns a 'command_item' dict that holds the commands that will be
        executed later on. """

        # There can only be push sections here
        # binary option must be defined
        command = [ [ options['binary'], '-v', '0'] ]

        # Threads must go in first position to do any difference
        if 'threads' in options:
            command += [ ["-threads", options.pop('threads')] ]

        # pre and post commands are optional
        precommand = []
        postcommand = []
        env = {}

        # Extract environment variables
        if 'network_timeout' in options:
            timeout = options['network_timeout']
            env.update({
                'FF_TCP_OPTIONS': "timeout=%s" % timeout,
                'FF_UDP_OPTIONS': "timeout=%s" % timeout
            })

        # Extract pre/post commands if any
        cmd_id = 1
        while 'precommand-%d' % cmd_id in options:
            cmd = options['precommand-%d' % cmd_id]
            precommand += [ [arg for arg in cmd.split(' ') if arg] ]
            cmd_id = cmd_id+1
        logger.write(0, "found %d precommand(s)" % len(precommand))

        cmd_id = 1
        while 'postcommand-%d' % cmd_id in options:
            cmd = options['postcommand-%d' % cmd_id]
            postcommand += [ [arg for arg in cmd.split(' ') if arg] ]
            cmd_id = cmd_id+1
        logger.write(0, "found %d postcommand(s)" % len(postcommand))

        url_in = options.pop('url-in')
        url_out = options.pop('url-out')

        param_id = 1
        while 'url-in-param-%d' % param_id in options:
            url_in += (param_id==1 and '?' or '&')
            url_in += options['url-in-param-%d' % param_id]
            if 'url-in-value-%d' % param_id in options:
                url_in += '=%s' % options['url-in-value-%d' % param_id]
            param_id = param_id+1

        param_id = 1
        while 'url-out-param-%d' % param_id in options:
            url_out += (param_id==1 and '?' or '&')
            url_out += options['url-out-param-%d' % param_id]
            if 'url-out-value-%d' % param_id in options:
                url_out += '=%s' % options['url-out-value-%d' % param_id]
            param_id = param_id+1

        # input URL parameters (FIXME, some options are not handled like on
        # the output side, compare with code below)
        command += [ ['-' + OPTIONS[setting[len("input_"):]], value]
            for (setting, value) in options.iteritems()
            if setting.startswith("input_")
            and setting[len("input_"):] in OPTIONS]

        if 'input_extra_params' in options:
            command += [ [item for item in options['input_extra_params'].split(' ') if item ] ]

        # input URL
        command += [ ["-i", url_in ] ]

        # crop options must precede size
        for crop in ['video_crop_top', 'video_crop_bottom', 'video_crop_left', 'video_crop_right']:
            if crop in options:
                command += [ ['-' + OPTIONS[crop], options.pop(crop)] ]

        if 'video_size' in options:
            command += [ ['-s', options.pop('video_size')] ]

        # Bit rates need to be expressed in kilobytes
        for bit_rate in ['audio_bit_rate', 'video_bit_rate']:
            if bit_rate in options:
                value = options.pop(bit_rate)
                if not (value.endswith("k")):
                    value += "k"
                command += [ [ '-' + OPTIONS[bit_rate], value] ]

        # Generate the rest of the command
        command += [ ['-' + OPTIONS[setting], value]
            for (setting, value) in options.iteritems() if setting in OPTIONS]

        # Single valued parameter
        command += [ '-%s' % OPTIONS_SINGLE[setting]
            for (setting, value) in options.iteritems()
            if setting in OPTIONS_SINGLE and value in ('true', 'yes', 'on')]

        if 'extra_params' in options:
            command += [ [item for item in options['extra_params'].split(' ') if item ] ]

        command += [ url_out ]

        command_item = {'pre': precommand,
            'main': sjutils.utils.flatten_list(command),
            'post': postcommand,
            'logger': logger,
            'section': section,
            'env': env,
        }

        return command_item

    def parse_config(self, reload_config=False):
        """ Parse sl2d configuration file. """

        config = ConfigParser.RawConfigParser()
        config.read(self.params['config'])

        # Get the settings from the main section
        options = dict(config.items('sl2d'))
        self.params.update({
            'main_loop_delay': float(options['main_loop_delay']),
            'respawn_min_delay': float(options['respawn_min_delay']),
        })

        for section in config.sections():
            logger = None
            options = dict(config.items(section))

            # Skip [sl2d] since we took care of this earlier
            if section == "sl2d":
                continue

            # Prepare logger for this command
            if reload_config:
                for cmd in self.commands:
                    if cmd['section'] == section:
                        logger = cmd['logger']
                        break

            if not logger:
                self.log.write(0, '[%s] attaching a logger.' % section)
                logger = MonitorLogger(section, \
                    logpath=self.daemon and self.params['logpath'] or None, \
                    debug_level=self.params['verbosity'])

            # Do the actual parsing
            command_item = self.parse_config_section(section, options, logger)

            if not reload_config:
                self.commands.append(command_item)
                continue

            self.log.write(0, 'reloading configuration')

            for cmd in self.commands:
                if cmd['section'] == section and \
                    (repr(cmd['pre']) != repr(command_item['pre']) or \
                    repr(cmd['main']) != repr(command_item['main']) or \
                    repr(cmd['post']) != repr(command_item['post'])):

                    self.commands.append(command_item)
                    self.commands.remove(cmd)
                    logger.write(0, "configuration updated")
                    self.log.write(0, "[%s] configuration updated" % section)

                    # Update the push if it is in the respawn queue
                    for pid in self.schedule.keys():
                        try:
                            if self.schedule[pid]['command']['section'] == section:
                                self.schedule[pid]['command'] = command_item
                                logger.write(0, "updating scheduled command")
                                self.respawn_quick = True
                                break
                        except KeyError:
                            self.log.write(0, 'PID %d escaped from respawn queue' % pid)

                    # Update the push if it is currently running and kill
                    # currently running process
                    for pid in self.process_list.keys():
                        try:
                            if self.process_list[pid]['command']['section'] == section:
                                self.process_list[pid]['command'] = command_item
                                self.stop_command(self.process_list[pid])
                                self.respawn_quick = True
                                break
                        except KeyError:
                            self.log.write(0, 'PID %d escaped from running process list' % pid)


                    break
                elif cmd['section'] == section:
                    logger.write(0, "configuration did not change")
                    self.log.write(0, "[%s] configuration did not change" % section)
                    break
            else:
                # New stream, add to the command list
                self.commands.append(command_item)
                self.schedule[time.time()] = {
                    'command': command_item,
                    'timestamp': 0,
                }
                self.log.write(0, "[%s] added to list" % section)

        # Remove deleted commands
        sections = config.sections()
        for command in self.commands:
            section = command['section']
            if section in sections or section == 'sl2d':
                continue

            self.log.write(0, '[%s] has vanished from configuration' % section)

            # Deleted stream, remove from command list
            self.commands.remove(command)
            self.log.write(0, '[%s] removed from list' % section)

            # remove from scheduled for respawn list
            for pid in self.schedule.keys():
                if self.schedule[pid]['command']['section'] == section:
                    try:
                        del self.schedule[pid]
                        self.log.write(0, '[%s] removed from respawn queue' % section)
                    except KeyError:
                        self.log.write(0, '[%s] escaped from respawn queue' % section)

            # remove from currently running list
            for pid in self.process_list.keys():
                if self.process_list[pid]['command']['section'] == section:
                    try:
                        command = self.process_list[pid]
                        del self.process_list[pid]
                        self.stop_command(command)
                        self.log.write(0, '[%s] removed from running process list' % section)
                    except KeyError:
                        self.log.write(0, '[%s] escaped from running process list' % section)

    def __print_process_status(self):
        """ Prints the status of process managed by sl2d. """

        # Create a copy of process_list since it might chance while
        # we are not looking
        process_list = dict(self.process_list.items())
        schedule = dict(self.schedule.items())

        self.log.write(1, "Actually running commands (%d)" % len(process_list))
        self.log.write(2, pprint.pformat(process_list))
        for pid in self.process_list.keys():
            try:
                self.log.write(1, '  * %d: %s' % (pid, self.process_list[pid]['command']['section']))
            except KeyError:
                self.log.write(1, '  * %d: vanished' % pid)

        self.log.write(1, "Scheduled commands for respawn (%d)" % len(schedule))
        self.log.write(2, pprint.pformat(schedule))

        for pid in self.schedule.keys():
            try:
                self.log.write(1, '  * %d: %s' % (pid, self.schedule[pid]['command']['section']))
            except KeyError:
                self.log.write(1, '  * %d: vanished' % pid)

    def respawn_command(self):
        """ Restart scheduled commands. """

        self.log.write(1, '<respawn_command>')
        self.__print_process_status()

        if self.respawn_quick:
            self.respawn_quick = False

        for sched_item in self.schedule.keys():

            try:
                command = self.schedule[sched_item]['command']

                # Command failed too quickly, wait next round before respawning
                if self.schedule[sched_item]['timestamp'] + self.params['respawn_min_delay'] > time.time():
                    self.log.write(0, '[%s] command respawning too fast, delayed' % (command['section']))
                    command['logger'].write(0, '"%s" respawning too fast, delayed' %  " ".join(command['main']))
                    continue

                self.log.write(0, '[%s] respawning command' % command['section'])
                command['logger'].write(0, 'respawning "%s"' % ' '.join(command['main']))
                self.start_command(self.schedule[sched_item]['command'])
                del self.schedule[sched_item]
            except KeyError:
                self.log.write(0, 'Command that had PID:%d disappeared from the queue.' % sched_item)

        self.__print_process_status()
        self.log.write(1, '</respawn_command>')

    def reload_config(self, _signum, frame):
        """ Reload configuration on SIGUSR2. """

        self.log.write(1, 'Received SIGUSR2')

        if frame:
            del frame

        self.parse_config(reload_config=True)

    def child_shutdown(self, signum, frame):
        """ Respawn command on SIGCHLD. """

        self.log.write(1, 'Received SIGCHLD')

        # Monitor status of running process
        for pid in self.process_list.keys():
            try:
                process = self.process_list[pid]['process']

                if process.poll() is None:
                    # This process is running, check the next one
                    continue

                command = self.process_list[pid]['command']

                self.log.write(0, '[%s] Process %d: received signal %d' % (command['section'], pid, signum))
                self.log.write(0, '[%s] Process %d: died unexpectedly, error code is %d' % (command['section'], pid, process.poll()))
                command['logger'].write(0, 'Process %d: received signal %d' % (pid, signum))
                command['logger'].write(0, 'Process %d: died unexpectedly, error code is %d' % (pid, process.poll()))

                # Execute post commands if any and if command lived long enough.
                # Do not wait for them and do not crash for them either.
                if command['post'] and self.process_list[pid]['timestamp'] + 2 * self.params['respawn_min_delay'] > time.time() :
                    trash = os.open(os.devnull, os.O_RDWR)
                    self.log.write(0, '[%s] Process %d: spawning post-death commands' % (command['section'], pid))
                    for postcmd in command['post']:
                        try:
                            command['logger'].write(0, 'Process %d: post-death command "%s"' % (pid, ' '.join(postcmd)))
                            subprocess.Popen(postcmd, stdout=trash, stderr=subprocess.STDOUT)
                        except Exception:
                            self.log.write(0, '[%s] post-death command failed' % command['section'])
                            command['logger'].write(0, '[%s] Process %d: post-death command "%s" failed' % (pid, ' '.join(postcmd)))
                    os.close(trash)

                # Adding to the 'scheduled for restart' list unless we already
                # did it ealier, somehow.
                for check_pid in self.schedule.keys():
                    try:
                        if self.schedule[check_pid]['command']['section'] == command['section']:
                            self.log.write(0, '[%s] Trick to avoid duplicating commands' % command['section'])
                            break
                    except KeyError:
                        # Command was removed from the scheduled commands for a
                        # reason or another
                        pass
                else:
                    self.schedule[pid] = {
                        'command': command,
                        'timestamp': self.process_list[pid]['timestamp']}

                del self.process_list[pid]
                self.log.write(0, '[%s] removed from running process list' % command['section'])

            except KeyError:
                self.log.write(0, 'PID %d escaped from running process list' % pid)

        # Inspect context to see if we are being run during respawn_command
        # execution. Set respawn_quick if necessary so that we will not
        # have to wait respawn_min_delay to respawn the command we are
        # currently treating while not interfering with current execution of
        # respawn_command.
        try:
            self.log.write(1, '<frame>')
            self.log.write(2, pprint.pformat(inspect.getframeinfo(frame)))

            for item in inspect.getouterframes(frame):
                self.log.write(2, pprint.pformat(item))
                self.log.write(1, '  * function: ' + item[3])

                if item[3] == "respawn_command":
                    self.respawn_quick = True
                    self.log.write(0, '  -> Delaying respawning')
                    break

            self.log.write(1, '</frame>')

            return
        finally:
            # Do not leak the frame
            del frame

        self.respawn_command()

    def shutdown(self, signum, frame):
        """ Shutdown sl2d on SIGTERM and SIGINT. """

        if frame:
            del frame

        self.__print_process_status()

        # Avoid log write failures further down the line when receiving a signal
        # since we are stopping anyway
        signal.signal(signal.SIGCHLD, signal.SIG_IGN)
        signal.signal(signal.SIGUSR2, signal.SIG_IGN)

        # shutdown ffmpeg instances
        for pid in self.process_list.iterkeys():
            self.stop_command(self.process_list[pid])

        self.log.write(0, "*** sl2d terminated by signal %d ***" % signum)
        self.log.close()
        if self.daemon:
            os.remove(self.pidfile)
        sys.exit(os.EX_OK)

    def stop_command(self, command):
        """ Stop running command. """

        process = command['process']

        if not isinstance(process, subprocess.Popen):
            return

        try:
            if process.poll() is None:
                self.log.write(0, '[%s] sending SIGTERM' % command['command']['section'])
                os.kill(process.pid, signal.SIGTERM)
                time.sleep(1)

            if process.poll() is None:
                self.log.write(0, '[%s] sending SIGKILL' % command['command']['section'])
                os.kill(process.pid, signal.SIGKILL)

            process.wait()

        except OSError:
            self.log.write(0, '[%s] command already gone' % command['command']['section'])

        self.log.write(0, '[%s] stopped' % command['command']['section'])

    def start_command(self, command):
        """ Start command and store it in process_list for reference. """

        if command['pre']:
            self.log.write(0, '[%s] spawning pre-running commands' % command['section'])
            command['logger'].write(0, 'spawning pre-running commands')
            for precmd in command['pre']:
                try:
                    command['logger'].write(0, 'pre-running command "%s"' % ' '.join(precmd))
                    trash = os.open(os.devnull, os.O_RDWR)
                    preprocess = subprocess.Popen(precmd,
                        stdin=trash,
                        stdout=command['logger'].get_log_file(),
                        stderr=subprocess.STDOUT)
                    os.close(trash)

                    if preprocess.wait() != 0:
                        raise Exception('return code is %d' % preprocess.poll())

                except Exception, error:
                    command['logger'].write(0, 'pre-running command "%s" failed' % ' '.join(precmd))
                    command['logger'].write(0, str(error))
                    command['logger'].write(0, 'scheduling for a retry')
                    self.log.write(0, '[%s] pre-running command failed' % command['section'])

                    # pre-commands are mandatory, schedule and return if one failed
                    self.schedule[time.time()] = {
                        'command': command,
                        'timestamp': time.time()}

                    return None

        command['logger'].write(0, 'starting "%s"' % ' '.join(command['main']))
        try:
            env = command['env']
            env.update(os.environ)
            trash = os.open(os.devnull, os.O_RDWR)
            process = subprocess.Popen(command['main'],
                stdin=trash,
                stdout=command['logger'].get_log_file(),
                stderr=subprocess.STDOUT,
                env=env)
            os.close(trash)
        except OSError, error:
            command['logger'].write(0, 'command failed to start')
            command['logger'].write(0, str(error))
            command['logger'].write(0, 'scheduling for a retry')
            self.log.write(0, '[%s] command failed to start' % command['section'])

            self.schedule[time.time()] = {
                'command': command,
                'timestamp': time.time()}

            return None

        # Adding to the list of running process
        self.process_list[process.pid] = {
            'process': process,
            'command': command,
            'timestamp': time.time()}
        self.log.write(0, '[%s] Process %d: started' % (command['section'], process.pid))
        command['logger'].write(0, 'started "%s" as pid %d' % (" ".join(command['main']), process.pid))

        return process.pid

    def run(self):
        """ Main function. """

        self.log.write(0, "*** sl2d version %s, started ***" % VERSION)

        # Bookkeeping our instanciations
        self.process_list = {}
        for command in self.commands:
            self.start_command(command)

        self.__print_process_status()

        # Main loop, monitor list of scheduled restarts
        while True:
            # Shorten loop if we received SIGCHLD while respawning commands
            if not self.respawn_quick:
                time.sleep(self.params['main_loop_delay'])
            self.respawn_command()

        # This code should never be reached
        self.shutdown(signal.SIGTERM, None)

def daemonize(options):
    """ Detach process from the controlling terminal and run it as a daemon. """

    if os.path.isfile(options.pidfile):
        fd = open(options.pidfile)
        old_pid = int(fd.read())
        fd.close()
        if os.path.isfile("/proc/%d/cmdline" % old_pid):
            print "There is already a running instance"
            os._exit(os.EX_OK)

    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(os.EX_OK)
    except OSError, error:
        raise Exception, "First fork failed: %s [%d]" % (error.strerror, error.errno)

    os.chdir('/')
    os.setsid()
    os.umask(0)

    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(os.EX_OK)
    except OSError, error:
        raise Exception, "Second fork failed: %s [%d]" % (error.strerror, error.errno)

    f = open(options.pidfile, 'w')
    f.write("%d" % os.getpid())
    f.close()

    # Resource usage information.
    maxfd = resource.getrlimit(resource.RLIMIT_NOFILE)[1]
    if (maxfd == resource.RLIM_INFINITY):
        maxfd = MAXFD

    # Iterate through and close all file descriptors.
    for fd in range(0, maxfd):
        try:
            os.close(fd)
        except OSError:	# ERROR, fd wasn't open to begin with (ignored)
            pass

    os.open(os.devnull, os.O_RDWR)	# standard input (0)

    # Duplicate standard input to standard output and standard error.
    os.dup2(0, 1)			# standard output (1)
    os.dup2(0, 2)			# standard error (2)

    Monitor(options).run()
    return os.EX_OK

if __name__ == "__main__":

    parser = optparse.OptionParser(
        version="%prog " + VERSION, option_list=[
        optparse.Option("-f", "--conf",       dest="conffile",  help="Define sl2d conf file", metavar="FILE", default=DFLT_CONFFILE),
        optparse.Option("-l", "--log",        dest="logpath",   help="Define sl2d log file path", metavar="PATH", default=DFLT_LOGPATH),
        optparse.Option("-p", "--pid",        dest="pidfile",   help="Define sl2d pid file", metavar="FILE", default=DFLT_PIDFILE),
        optparse.Option("-n", "--no-daemon",  dest="nodaemon",  help="Define sl2d log file", action="store_true", default=False),
        optparse.Option("-v", "--verbose",    dest="verbosity", help="Define sl2d verbose level", action="count", default=0)]
        )

    (parsed_options, args) = parser.parse_args()

    if not parsed_options.nodaemon:
        retCode = daemonize(parsed_options)
    else:
        Monitor(parsed_options).run()

    sys.exit(retCode)

